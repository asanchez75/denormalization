<?php

/**
 * @file
 * Contains denormalization.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Batch operation for batch, one at a time.
 *
 * This is the function that is called on each operation in batch
 */
function denormalization_op($id, $content_type, $fields, $operation_details, &$context) {

  //usleep(2000000);
    $connection = \Drupal::database();
    $result = $connection->insert($content_type)
      ->fields($fields)
      ->execute();

  $context['results'][] = $id;

  $context['message'] = t('Running Batch "@id" @details', ['@id' => $id, '@details' => $operation_details]
  );
}

/**
 * Batch 'finished' callback
 */
function denormalization_finished($success, $results, $operations) {
  if ($success) {
    // Here we could do something meaningful with the results.
    // We just display the number of nodes we processed...
    drupal_set_message(t('@count results processed.', ['@count' => count($results)]));
    drupal_set_message(t('The final result was "%final"', ['%final' => end($results)]));
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(
      t('An error occurred while processing @operation with arguments : @args',
        [
          '@operation' => $error_operation[0],
          '@args' => print_r($error_operation[0], TRUE),
        ]
      )
    );
  }
}


/**
 * Implements hook_help().
 */
function denormalization_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the denormalization module.
    case 'help.page.denormalization':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('denormalization of content types') . '</p>';
      return $output;

    default:
  }
}

